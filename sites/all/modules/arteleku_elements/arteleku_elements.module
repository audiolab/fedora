<?php

/**
 * @file
 * Hooks and constants for xml_form_elements.
 */

/**
 * Constants
 
define('THEME_XML_FORM_ELEMENTS_TABS', 'tabs');
define('THEME_XML_FORM_ELEMENTS_TABS_CONTENT', 'tabs_content');
define('THEME_XML_FORM_ELEMENTS_TABPANEL', 'tabpanel');
define('THEME_XML_FORM_ELEMENTS_TAGS', 'tags');
define('THEME_XML_FORM_ELEMENTS_TAGS_CONTENT', 'tags_content');
define('THEME_XML_FORM_ELEMENTS_TAG', 'tag');
define('THEME_XML_FORM_ELEMENTS_DATEPICKER', 'datepicker');
define('PATH_XML_FORM_ELEMENTS', drupal_get_path('module', 'xml_form_elements') . '/');
define('PATH_XML_FORM_ELEMENTS_INCLUDES', PATH_XML_FORM_ELEMENTS . 'includes/');
define('PATH_XML_FORM_ELEMENTS_JQUERY_THEME', PATH_XML_FORM_ELEMENTS . 'theme/');
define('PATH_XML_FORM_ELEMENTS_JS', PATH_XML_FORM_ELEMENTS . 'js/');
define('PATH_XML_FORM_ELEMENTS_CSS', PATH_XML_FORM_ELEMENTS . 'css/');
define('PATH_XML_FORM_ELEMENTS_IMAGES', PATH_XML_FORM_ELEMENTS . 'images/');

/**
 * Implements hook_element_info().
 */
function arteleku_elements_element_info() {
  return array(
    'authorities' => array(
      '#input' => TRUE,
	  '#process' => array('arteleku_elements_authorities_process'),
	  '#theme_wrappers' => array('authorities', 'form_element'),
  	),
	'authority' => array(
		'#input' => TRUE,
		'#process' => array('arteleku_elements_authority_process'),
		'#theme' => 'authority',
		'#lang' => '',
		'#tid' => ''
	)

  );
}

/**
 * Implements hook_theme().
 */
function arteleku_elements_theme($existing, $type, $theme, $path) {
  return array(
    'authorities' => array(
      'render element' => 'element',
	  'template' => 'templates/Authorities',
	  'file' => 'includes/Authorities.inc',
  	),
	'authority' => array(
		'render element' => 'element',
		'file' => 'includes/Authority.inc'
	)
  );
}

/**
 * Process the 'taxonomy' Element 
 */

function arteleku_elements_authorities_process(array $element, array &$form_state, array $complete_form = NULL) {
	form_load_include($form_state, 'inc', 'arteleku_elements', 'includes/Authorities');
	return Authorities::Process($element, $form_state, $complete_form);
}

function arteleku_elements_authority_process(array $element, array &$form_state, array $complete_form = NULL) {
	form_load_include($form_state, 'inc', 'arteleku_elements', 'includes/Authority');
	return Authority::Process($element, $form_state, $complete_form);
}

function arteleku_elements_ajax_callback($form, $form_state) {
  $t = find_element($form, $form_state['triggering_element']['#ajax']['params']['render']);
  $html = drupal_render($t);
  $commands = array();
  $commands[] = ajax_command_replace(NULL, $html);
  $commands[] = ajax_command_invoke(NULL, 'Drupal.behaviors.artelekuFormElementAuthority.authority.registerSelect');
  return array(
	  '#type' => 'ajax',
	  '#commands' => $commands
  );
}


function arteleku_elements_xml_form_authority_create_alter(XMLDocument &$created, FormElement $element, $value){
	drupal_debug($created, "creado");
	$t = $element->toArray();
	drupal_debug($t, "seguido");

}

function arteleku_elements_form_element_authorities_ajax_alter(FormElement $element, array &$form, array &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $action = $triggering_element['#ajax']['params']['action'];
  $hash = $triggering_element['#ajax']['params']['target'];

  switch ($action) {
    case 'add':
      arteleku_elements_form_element_authorities_ajax_add($element, $form, $form_state, $hash);
	  break;
    case 'delete':
     // xml_form_elements_form_element_tabs_ajax_delete($element, $form, $form_state);
      break;
  }
}




function arteleku_elements_form_element_authorities_ajax_add(FormElement $element, array &$form, array &$form_state, $hash) {

		$select_value = $form_state['input'][$hash . 'select'];  

	   /*
		* En $select_value tengo un array con los valores seleccionados en el selectbox. Tengo que buscar los valores del mismo
		* y hacer un loop para crear los elementos. Me voy a cargar toooooooooooooooooodos los elementos que hay de por medio
		* para crearlos todos bien. (Mirar si el authority puede generarse sólo....) y para cada idioma!!!!!!
		*
		*/
	
		drupal_debug($select_value, 'arteleku');
		
		// Get Input Value as its not stored in the object form.
  		$element_children = array_values($element->children);
  		
		$base_authority = clone $element_children[0];

		foreach($element_children as $children){
			$children->orphan();
			$c_hash = $children->hash;
			foreach(element_children($form) as $form_child){
				if($form[$form_child]['#hash'] == $c_hash){
					unset($form[$form_child]);
				}
			}
		}  //Hemos eliminado todos los hijos, pero me he quedado con uno en $base_authority para poder crear los nuevos

		foreach ($select_value as $tid){
			//Lo vamos a recrear para cada una de las taxonomías y para cada uno de los idiomas.
			$term = taxonomy_term_load($tid);
			//el campo del nombre es name_field
			foreach($term->name_field as $lang_code => $term_data){
				$localized_name = $term_data[0]['value'];
				$aut = clone $base_authority;
				$element->adopt($aut);
				$aut->lang = $lang_code;
				$aut->tid = $tid;
				$aut = $aut->toArray();
				$aut['#default_value'] = $localized_name;
				//$aut['#lang'] = $lang_code;
				//$aut['#tid'] = $tid;
				$form[] = $aut;
			}	
		
		}


  // Create new tag and have it stored in the state.
  //$input->parent->adopt($tag);
  //$tag = $tag->toArray();
  //$tag['#default_value'] = $default_value;
  //drupal_debug($tag, 'oeoeoeoeooeoeoeooeoe');
  // Update drupal form.
  //$form[] = $tag;
}


/**
 * Process the 'tabs' Element.
 *
 * @param array $element
 *   The element to be processed.
 * @param mixed $edit
 *   The submitted value for this element, or NULL.
 * @param array $form_state
 *   The drupal form state.
 * @param array $complete_form
 *   The drupal form.
 *
 * @return array
 *   The processed element.
 
function xml_form_elements_tabs_process(array $element, array &$form_state, array $complete_form = NULL) {
  form_load_include($form_state, 'inc', 'xml_form_elements', 'includes/Tabs');
  return Tabs::Process($element, $form_state, $complete_form);
}

/**
 * Process the 'tabpanel' Element.
 *
 * @param array $element
 *   The element to be processed.
 * @param mixed $edit
 *   The submitted value for this element, or NULL.
 * @param array $form_state
 *   The drupal form state.
 * @param array $complete_form
 *   The drupal form.
 *
 * @return array
 *   The processed element.
 
function xml_form_elements_tabpanel_process(array $element, array &$form_state, array $complete_form = NULL) {
  form_load_include($form_state, 'inc', 'xml_form_elements', 'includes/TabPanel');
  return TabPanel::Process($element, $form_state, $complete_form);
}

/**
 * Process the 'tags' Element.
 *
 * @param array $element
 *   The element to be processed.
 * @param mixed $edit
 *   The submitted value for this element, or NULL.
 * @param array $form_state
 *   The drupal form state.
 * @param array $complete_form
 *   The drupal form.
 *
 * @return array
 *   The processed element.
 
function xml_form_elements_tags_process(array $element, array &$form_state, array $complete_form = NULL) {
  form_load_include($form_state, 'inc', 'xml_form_elements', 'includes/Tags');
  return Tags::Process($element, $form_state, $complete_form);
}

/**
 * Process the 'tag' Element.
 *
 * @param array $element
 *   The element to be processed.
 * @param array $form_state
 *   The drupal form state.
 * @param array $complete_form
 *   The drupal form.
 *
 * @return array
 *   The processed element.
 
function xml_form_elements_tag_process($element, &$form_state, $complete_form) {
  form_load_include($form_state, 'inc', 'xml_form_elements', 'includes/Tag');
  return Tag::Process($element, $form_state, $complete_form);
}

/**
 * Process the 'datepicker' Element.
 *
 * @param array $element
 *   The element to be processed.
 * @param array $form_state
 *   The drupal form state.
 * @param array $complete_form
 *   The drupal form.
 *
 * @return array
 *   The processed element.
 *
function xml_form_elements_datepicker_process($element, &$form_state, $complete_form) {
  form_load_include($form_state, 'inc', 'xml_form_elements', 'includes/Datepicker');
  return Datepicker::Process($element, $form_state, $complete_form);
}

/**
 * Generic callback for all AJAX requests.
 *
 * @param array $form
 *   The processed Drupal form.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The form element to render in response to the AJAX request.
 *
function xml_form_elements_ajax_callback($form, $form_state) {
  return find_element($form, $form_state['triggering_element']['#ajax']['params']['render']);
}

function xml_form_elements_form_element_tabs_ajax_alter(FormElement $element, array &$form, array &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $action = $triggering_element['#ajax']['params']['action'];
  switch ($action) {
    case 'add':
      xml_form_elements_form_element_tabs_ajax_add($element, $form, $form_state);
      break;
    case 'delete':
      xml_form_elements_form_element_tabs_ajax_delete($element, $form, $form_state);
      break;
  }
}

function xml_form_elements_form_element_tabs_ajax_add(FormElement $element, array &$form, array &$form_state) {
  $tab = $element->findElement($form_state['triggering_element']['#ajax']['params']['child']);
  $new_tab = clone $tab;
  $new_tab->eachDecendant(function($element) { $element->default_value = NULL; });
  $element->adopt($new_tab);
  $form[] = $new_tab->toArray();
}

function xml_form_elements_form_element_tabs_ajax_delete(FormElement $element, array &$form, array &$form_state) {
  $tab = $element->findElement($form_state['triggering_element']['#ajax']['params']['child']);
  $tab->orphan();
  foreach (element_children($form) as $child) {
    if ($form[$child]['#hash'] == $tab->hash) {
      unset($form[$child]);
      break;
    }
  }
}

/**
 * Not ideal a hook used for modifying tags during the build function.
 *
function xml_form_elements_form_element_tags_ajax_alter(FormElement $element, array &$form, array &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $action = $triggering_element['#ajax']['params']['action'];
  switch ($action) {
    case 'add':
      xml_form_elements_form_element_tags_ajax_add($element, $form, $form_state);
      break;

    case 'delete':
      xml_form_elements_form_element_tags_ajax_delete($element, $form, $form_state);
      break;

    case 'edit':
      xml_form_elements_form_element_tags_ajax_edit($element, $form, $form_state);
      break;
  }
}

function xml_form_elements_form_element_tags_ajax_add(FormElement $element, array &$form, array &$form_state) {
  $form_children = element_children($form);
  $input_field = &$form[array_shift($form_children)];
  // Get Input Value as its not stored in the object form.
  $default_value = $input_field['#default_value'];
  $input_field['#value'] = '';
  $element_children = array_values($element->children);
  $input = array_shift($element_children);
  $tag = clone $input;
  // Create new tag and have it stored in the state.
  $input->parent->adopt($tag);
  $tag = $tag->toArray();
  $tag['#default_value'] = $default_value;
  // Update drupal form.
  $form[] = $tag;
}

function xml_form_elements_form_element_tags_ajax_delete(FormElement $element, array &$form, array &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $hash = $triggering_element['#ajax']['params']['child'];
  $tag = $element->findElement($hash);
  $tag->orphan();
  foreach (element_children($form) as $child) {
    if ($form[$child]['#hash'] == $hash) {
      unset($form[$child]);
    }
  }
}

function xml_form_elements_form_element_tags_ajax_edit(FormElement $element, array &$form, array &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $input_field = &$form[array_shift(element_children($form))];
  if ($input_field['#default_value'] != '') {
    xml_form_elements_form_element_tags_ajax_add($element, $form, $form_state);
  }
  $hash = $triggering_element['#ajax']['params']['child'];
  $tag_field = find_element($form, $hash);
  $input_field['#value'] = $tag_field['#default_value'];
  xml_form_elements_form_element_tags_ajax_delete($element, $form, $form_state);
}

/**
 * Pre-render callback; conditionally copy #default_value to #markup.
 *
 * Only copies if there is no #markup already set, and #default_value is not
 * empty.
 *
 * @param array $elements
 *   An array representing the given element.
 *
function xml_form_elements_default_value_to_markup($elements) {
  if (empty($elements['#markup']) && !empty($elements['#default_value'])) {
    $elements['#markup'] = $elements['#default_value'];
  }
  return $elements;
}

/**
 * Pre-render callback; removes empty markup from an element.
 *
 * @param array $elements
 *   An array representing the given element.
 *
function xml_form_elements_remove_empty_markup($elements) {
  $children = element_children($elements);
  if (!empty($elements['#markup']) || count($children) > 0) {
    return $elements;
  }
  else {
    return array();
  }
}

/**
 * Implements theme_hook().
 *
function theme_xml_form_element(&$elements) {
  if (!empty($elements['element']['#children'])) {
    return theme('form_element', $elements['element']);
  }
}

/**
 * Strips prefixes and suffixes from children who are empty.
 *
 * @param string $children
 *   The markup attempted to be rendered.
 * @param array $elements
 *   An array of elements.
 *
 * @return string
 *   The rendered children if there is markup, nothing otherwise.
 *
function xml_form_elements_defaultable_markup($children, &$elements) {
  if (!empty($children)) {
    return $children;
  }
  else {
    // We need to strip away prefixes and suffixes when there is no markup
    // to be rendered.
    $elements['#prefix'] = '';
    $elements['#suffix'] = '';
    return '';
  }
}*/
