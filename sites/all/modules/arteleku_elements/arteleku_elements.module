<?php

/**
 * @file
 * Hooks and constants for xml_form_elements.
 */

/**
 * Implements hook_element_info().
 */
function arteleku_elements_element_info() {
  return array(
    'authorities' => array(
      '#input' => TRUE,
	  '#user_date' => array('taxonomy' => '0', 'multilingual' => TRUE),
	  '#process' => array('arteleku_elements_authorities_process'),
	  '#theme_wrappers' => array('authorities', 'form_element'),
  	),
	'authority' => array(
		'#input' => TRUE,
		'#process' => array('arteleku_elements_authority_process'),
		'#theme' => 'authority',
		'#lang' => '',
		'#tid' => ''
	)

  );
}

/**
 * Implements hook_theme().
 */
function arteleku_elements_theme($existing, $type, $theme, $path) {
  return array(
    'authorities' => array(
      'render element' => 'element',
	  'template' => 'templates/Authorities',
	  'file' => 'includes/Authorities.inc',
  	),
	'authority' => array(
		'render element' => 'element',
		'file' => 'includes/Authority.inc'
	)
  );
}

/**
 * Process the 'taxonomy' Element 
 */

function arteleku_elements_authorities_process(array $element, array &$form_state, array $complete_form = NULL) {
	form_load_include($form_state, 'inc', 'arteleku_elements', 'includes/Authorities');
	return Authorities::Process($element, $form_state, $complete_form);
}

function arteleku_elements_authority_process(array $element, array &$form_state, array $complete_form = NULL) {
	form_load_include($form_state, 'inc', 'arteleku_elements', 'includes/Authority');
	return Authority::Process($element, $form_state, $complete_form);
}

function arteleku_elements_ajax_callback($form, $form_state) {
  $t = find_element($form, $form_state['triggering_element']['#ajax']['params']['render']);
  $html = drupal_render($t);
  $commands = array();
  $commands[] = ajax_command_replace(NULL, $html);
  $commands[] = ajax_command_invoke(NULL, 'Drupal.behaviors.artelekuFormElementAuthority.authority.registerSelect');
  return array(
	  '#type' => 'ajax',
	  '#commands' => $commands
  );
}

function arteleku_elements_xml_form_authority_read_alter(FormElement &$element, $value, $node){
	if (empty($node))
		return NULL;	
		
		
	$valueUri = $node->getAttribute('valueURI');
	$lang = $node->getAttribute('xml:lang');
	$element->lang = $lang;
	$valueUri = explode('/', $valueUri);
	$element->tid = array_pop($valueUri);
}


function arteleku_elements_xml_form_authority_create_alter(DOMElement &$created, FormElement $element, $value){
	global $base_url;
	if (isset($element->lang)){
		$created->setAttribute('xml:lang', $element->lang);
	}
	if (isset($element->tid)){
		$created->setAttribute('valueURI', "{$base_url}/taxonomy/term/{$element->tid}");
	}
}

function arteleku_elements_form_element_authorities_ajax_alter(FormElement $element, array &$form, array &$form_state) {
  $triggering_element = $form_state['triggering_element'];
  $action = $triggering_element['#ajax']['params']['action'];
  $hash = $triggering_element['#ajax']['params']['target'];

  switch ($action) {
    case 'add':
      arteleku_elements_form_element_authorities_ajax_add($element, $form, $form_state, $hash);
	  break;
  }
}




function arteleku_elements_form_element_authorities_ajax_add(FormElement $element, array &$form, array &$form_state, $hash) {

		$select_value = $form_state['input'][$hash . 'select'];  

	   /*
		* En $select_value tengo un array con los valores seleccionados en el selectbox. Tengo que buscar los valores del mismo
		* y hacer un loop para crear los elementos. Me voy a cargar toooooooooooooooooodos los elementos que hay de por medio
		* para crearlos todos bien. (Mirar si el authority puede generarse sólo....) y para cada idioma!!!!!!
		*
		*/
	
		// Get Input Value as its not stored in the object form.
  		$element_children = array_values($element->children);
  		
		$base_authority = clone $element_children[0];

		foreach($element_children as $children){
			$children->orphan();
			$c_hash = $children->hash;
			foreach(element_children($form) as $form_child){
				if($form[$form_child]['#hash'] == $c_hash){
					unset($form[$form_child]);
				}
			}
		}  //Hemos eliminado todos los hijos, pero me he quedado con uno en $base_authority para poder crear los nuevos
		if (!is_array($select_value)){
			$select_value = array($select_value);
		}

		foreach ($select_value as $tid){
			//Lo vamos a recrear para cada una de las taxonomías y para cada uno de los idiomas.
			$term = taxonomy_term_load($tid);
			
			if ($element->user_data['multilingual']){
				//el campo del nombre es name_field
				foreach($term->name_field as $lang_code => $term_data){
					$localized_name = $term_data[0]['value'];
					$aut = clone $base_authority;
					$element->adopt($aut);
					$aut->lang = $lang_code;
					$aut->tid = $tid;
					$aut = $aut->toArray();
					$aut['#default_value'] = $localized_name;
					$form[] = $aut;
				}
			}else{
				$aut = clone $base_authority;
				$element->adopt($aut);
				$aut->tid = $term->tid;
				$aut = $aut->toArray();
				$aut['#default_value'] = $term->name;
				$form[] = $aut;
			}	
		
		}
}
